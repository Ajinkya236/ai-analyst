server:
  port: 8080
  servlet:
    context-path: /api

spring:
  application:
    name: ai-analyst-backend
  
  # Database Configuration
  datasource:
    url: jdbc:mysql://localhost:3306/ai_analyst?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
    username: ${DB_USERNAME:ai_analyst}
    password: ${DB_PASSWORD:ai_analyst123}
    driver-class-name: com.mysql.cj.jdbc.Driver
    
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
    open-in-view: false
    
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
      
  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
      enabled: true
      
  # Mail Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            
  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: UTC

# AI Configuration
ai:
  openai:
    api-key: ${OPENAI_API_KEY:}
    base-url: ${OPENAI_BASE_URL:https://api.openai.com}
    chat:
      options:
        model: gpt-4
        temperature: 0.7
        max-tokens: 4000
        
  anthropic:
    api-key: ${ANTHROPIC_API_KEY:}
    base-url: ${ANTHROPIC_BASE_URL:https://api.anthropic.com}
    
  vectorstore:
    pgvector:
      url: jdbc:postgresql://localhost:5432/ai_analyst_vectors
      username: ${VECTOR_DB_USERNAME:ai_analyst}
      password: ${VECTOR_DB_PASSWORD:ai_analyst123}
      dimension: 1536
      distance-type: COSINE_DISTANCE
      
  # AI Agent Service Configuration
  agents:
    base-url: ${AI_AGENTS_BASE_URL:http://localhost:8001}
    timeout: 30000
    retry-attempts: 3
    health-check-interval: 60000

# File Storage Configuration
storage:
  type: local # local, s3, minio
  local:
    path: ${STORAGE_PATH:./uploads}
  s3:
    bucket: ${S3_BUCKET:ai-analyst-storage}
    region: ${S3_REGION:us-east-1}
    access-key: ${S3_ACCESS_KEY:}
    secret-key: ${S3_SECRET_KEY:}

# AI Agent Configuration
agents:
  founder-voice:
    enabled: true
    timeout: 1800 # 30 minutes
    retry-attempts: 2
    twilio:
      account-sid: ${TWILIO_ACCOUNT_SID:}
      auth-token: ${TWILIO_AUTH_TOKEN:}
      phone-number: ${TWILIO_PHONE_NUMBER:}
      
  behavioral-assessment:
    enabled: true
    timeout: 900 # 15 minutes
    retry-attempts: 1
    survey-types:
      - big-five
      - mbti
      - disc
      
  deep-research:
    enabled: true
    timeout: 3600 # 60 minutes
    retry-attempts: 3
    max-sources: 10
    search-depth: deep
    
  data-ingestion:
    enabled: true
    timeout: 600 # 10 minutes
    retry-attempts: 2
    processing-mode: fast
    quality-check: true
    enable-ocr: true

# Logging Configuration
logging:
  level:
    com.aianalyst: DEBUG
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/ai-analyst-backend.log

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,env,configprops
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        step: 30s
    distribution:
      percentiles-histogram:
        http.server.requests: true
        ai.agent.execution.time: true
        reports.generation.time: true
        data.processing.time: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
        ai.agent.execution.time: 0.5, 0.95, 0.99
        reports.generation.time: 0.5, 0.95, 0.99
        data.processing.time: 0.5, 0.95, 0.99
    tags:
      application: ai-analyst-backend
      environment: ${SPRING_PROFILES_ACTIVE:development}

# JWT Configuration
app:
  jwt:
    secret: ${JWT_SECRET:mySecretKey123456789012345678901234567890}
    expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days in milliseconds

# CORS Configuration
cors:
  allowed-origins: 
    - http://localhost:4200
    - http://127.0.0.1:4200
  allowed-methods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowed-headers:
    - "*"
  allow-credentials: true
  max-age: 3600
